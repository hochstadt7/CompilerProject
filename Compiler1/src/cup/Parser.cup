/*************/
/* IMPORTS */
/*************/

import java_cup.runtime.*;
import ast.*;
import java.util.List;
import java.util.LinkedList;

parser code
{:
	public Lexer lexer;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}
	public void report_error(String message, Object info)
	{
    System.out.print("Syntax error at line " + lexer.getLine() + " of input\n");
		// System.out.print("ERROR >> ");
		// System.out.print("[");
		// System.out.print(lexer.getLine());
		// System.out.print(":");
		// System.out.print(lexer.getCharPos());
		// System.out.print("] ");
		System.exit(1);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	try{
	s = lexer.next_token();
	// System.out.print(s.sym);
	// System.out.print("[");
	// System.out.print(lexer.getLine());
	// System.out.print(":");
	// System.out.print(lexer.getCharPos());
	// System.out.print("] ");
	// System.out.print(sym.terminalNames[s.sym]);
	// if (s.value != null)
	// {
	//	System.out.print("( ");
	//	System.out.print(s.value);
	//	System.out.print(" )");
	// }
	// System.out.print("\n");
	return s;
	}
	catch (java.lang.Error e) {
         System.err.print("Syntax error at line " + lexer.getLine() + " of input. Lexer\n");
         System.exit(1);
         return null;
     }
:};

/*************/
/* TERMINALS */
/*************/
terminal IF;
terminal ELSE;
terminal WHILE;
terminal TRUE; 
terminal FALSE;
terminal EXTENDS;
terminal SYSO;
terminal LENGTH; 
terminal NEW; 
terminal STATIC;
terminal RETURN;
terminal PUBLIC;
terminal MAIN;
terminal CLASS;
terminal THIS;
terminal INT;
terminal BOOLEAN;
terminal STRING;
terminal VOID;
terminal SEMICOLON;
terminal COMMA;
terminal DOT;
terminal LP;
terminal RP;
terminal LC;
terminal RC;
terminal LB;
terminal RB;
terminal EQUAL;
terminal LT;
terminal NEG;
terminal AND;
terminal MULT;
terminal PLUS;
terminal MINUS;
terminal Integer NUMBER;
terminal String IDENTIFIER;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal Program			prog;
non terminal MainClass			mainClass;
non terminal List<ClassDecl>	classList;
non terminal ClassDecl			classDecl;
non terminal String 			optExtends;
non terminal List<VarDecl>		varList;
non terminal VarDecl			varDecl;
non terminal List<MethodDecl>	methodList;
non terminal MethodDecl			methodDecl;
non terminal List<FormalArg>	optFormArgsList;
non terminal List<FormalArg>	formArgsList;
non terminal AstType			type;
non terminal List<Statement>	statementList;
non terminal Statement			statement;
non terminal Expr				expression;
non terminal List<Expr>			optActArgsList;
non terminal List<Expr> 		actArgsList;

/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence left AND;
precedence nonassoc LT;
precedence left PLUS, MINUS;
precedence left MULT;
precedence right NEG;
precedence nonassoc LC;
precedence left DOT;

/************************/
/* INITIAL NON TERMINAL */
/************************/
start with prog;

/********************/
/* PRODUCTION RULES */
/********************/

prog			::= mainClass:m classList:l		{: RESULT = new Program(m, l);						:};
mainClass		::= CLASS IDENTIFIER:name LB PUBLIC STATIC VOID MAIN LP STRING LC RC IDENTIFIER:args RP LB statement:stat RB RB
												{: RESULT = new MainClass(name, args, stat);		:};
classList		::= classList:l classDecl:c		{: l.add(c); RESULT = l;							:}
				   |							{: RESULT = new LinkedList<ClassDecl>();			:};
classDecl		::= CLASS IDENTIFIER:name optExtends:ext LB varList:vl methodList:ml RB
												{: RESULT = new ClassDecl(name, ext, vl, ml);		:};
optExtends		::= EXTENDS IDENTIFIER:s		{: RESULT = s;										:}
				  |								{: RESULT = null;									:};
varList			::= varList:l varDecl:v			{: l.add(v); RESULT = l;							:}
				  |								{: RESULT = new LinkedList<VarDecl>();				:};
varDecl			::= type:t IDENTIFIER:s SEMICOLON {: RESULT = new VarDecl(t, s, lexer.getLine());	:};
methodList		::= methodList:l methodDecl:m	{: l.add(m); RESULT = l;							:}
				  |								{: RESULT = new LinkedList<MethodDecl>();			:};
methodDecl		::= PUBLIC type:retT IDENTIFIER:s LP optFormArgsList:args RP LB varList:vars statementList:body RETURN expression:retE SEMICOLON RB
												{: RESULT = new MethodDecl(retT, s, args, vars, body, retE, lexer.getLine()); :};
optFormArgsList	::= formArgsList:l				{: RESULT = l;										:}
				  |								{: RESULT = new LinkedList<FormalArg>(); 			:};
formArgsList	::= type:t IDENTIFIER:s			{: LinkedList<FormalArg> l = new LinkedList<FormalArg>(); l.add(new FormalArg(t, s, lexer.getLine())); RESULT = l; :}
				  | formArgsList:l COMMA type:t IDENTIFIER:s
												{: l.add(new FormalArg(t, s, lexer.getLine())); RESULT = l;  :};
type			::= INT LC RC					{: RESULT = new IntArrayAstType();					:}
				  | BOOLEAN						{: RESULT = new BoolAstType();						:}
				  | INT							{: RESULT = new IntAstType();						:}
				  | IDENTIFIER:s				{: RESULT = new RefType(s);							:};
statementList	::= statement:s statementList:l	{: l.add(0, s); RESULT = l;							:}
				  | 							{: RESULT = new LinkedList<Statement>();			:};
statement		::= LB statementList:l RB		{: RESULT = new BlockStatement(l);					:}
				  | IF LP expression:cond RP statement:s1 ELSE statement:s2
				  								{: RESULT = new IfStatement(cond, s1, s2);			:}
				  | WHILE LP expression:cond RP statement:body
				  								{: RESULT = new WhileStatement(cond, body);			:}
				  | SYSO LP expression:e RP SEMICOLON
				  								{: RESULT = new SysoutStatement(e);					:}
				  | IDENTIFIER:s EQUAL expression:e SEMICOLON
				  								{: RESULT = new AssignStatement(s, e);				:}
				  | IDENTIFIER:s LC expression:ind RC EQUAL expression:rv SEMICOLON
				  								{: RESULT = new AssignArrayStatement(s, ind, rv);	:};
expression		::= expression:e1 AND expression:e2		{: RESULT = new AndExpr(e1, e2);			:}
				  | expression:e1 LT expression:e2		{: RESULT = new LtExpr(e1, e2);				:}
				  | expression:e1 PLUS expression:e2	{: RESULT = new AddExpr(e1, e2);			:}
				  | expression:e1 MINUS expression:e2	{: RESULT = new SubtractExpr(e1, e2);		:}
				  | expression:e1 MULT expression:e2	{: RESULT = new MultExpr(e1, e2);			:}
				  | expression:e1 LC expression:e2 RC	{: RESULT = new ArrayAccessExpr(e1, e2);	:}
				  | expression:e DOT LENGTH				{: RESULT = new ArrayLengthExpr(e);			:}
				  | expression:e DOT IDENTIFIER:s LP optActArgsList:args RP
				  								{: RESULT = new MethodCallExpr(e, s, args);			:}
				  | NUMBER:n					{: RESULT = new IntegerLiteralExpr(n);				:}
				  | TRUE						{: RESULT = new TrueExpr();							:}
				  | FALSE						{: RESULT = new FalseExpr();						:}
				  | IDENTIFIER:s				{: RESULT = new IdentifierExpr(s);					:}
				  | THIS						{: RESULT = new ThisExpr();							:}
				  | NEW INT LC expression:l RC	{: RESULT = new NewIntArrayExpr(l);					:}
				  | NEW IDENTIFIER:s LP RP		{: RESULT = new NewObjectExpr(s);					:}
				  | NEG expression:e			{: RESULT = new NotExpr(e);							:}
				  | LP expression:e RP			{: RESULT = e;										:};
optActArgsList	::= actArgsList:l				{: RESULT = l;										:}
				  | 							{: RESULT = new LinkedList<Expr>(); 					:};
actArgsList		::= expression:e				{: LinkedList<Expr> l = new LinkedList<Expr>(); l.add(e); RESULT = l;  :}
				  | actArgsList:l COMMA expression:e	{: l.add(e); RESULT = l;					:};
