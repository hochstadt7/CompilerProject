/*************/
/* IMPORTS */
/*************/

import java_cup.runtime.*;
import ast.*;
import java.util.List;
import java.util.LinkedList;

parser code
{:
	public Lexer lexer;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}
	public void report_error(String message, Object info)
	{
    System.out.print("Syntax error at line " + lexer.getLine() + " of input\n");
		// System.out.print("ERROR >> ");
		// System.out.print("[");
		// System.out.print(lexer.getLine());
		// System.out.print(":");
		// System.out.print(lexer.getCharPos());
		// System.out.print("] ");
		System.exit(1);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	s = lexer.next_token();
	// System.out.print(s.sym);
	// System.out.print("[");
	// System.out.print(lexer.getLine());
	// System.out.print(":");
	// System.out.print(lexer.getCharPos());
	// System.out.print("] ");
	// System.out.print(sym.terminalNames[s.sym]);
	// if (s.value != null)
	// {
	//	System.out.print("( ");
	//	System.out.print(s.value);
	//	System.out.print(" )");
	// }
	// System.out.print("\n");
	return s;
:};

/*************/
/* TERMINALS */
/*************/
terminal IF;
terminal ELSE;
terminal WHILE 
terminal TRUE; 
terminal FALSE;
terminal EXTENDS;
terminal SYSO;
terminal LENGTH; 
terminal NEW; 
terminal NULL
terminal STATIC;
terminal RETURN;
terminal PUBLIC;
terminal MAIN;
terminal CLASS;
terminal THIS;
terminal INT;
terminal BOOLEAN;
terminal STRING;
terminal VOID;
terminal SEMICOLON;
terminal COMMA;
terminal DOT;
terminal LP;
terminal RP;
terminal LC;
terminal RC;
terminal LB;
terminal RB;
terminal EQUAL;
terminal LT;
terminal NEG;
terminal AND;
terminal MULT;
terminal PLUS;
terminal MINUS;
terminal NUMBER;
terminal IDENTIFIER;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal prog;
non terminal mainClass
non terminal classList
non terminal classDecl
non terminal optExtends
non terminal varList
non terminal varDecl
non terminal methodList
non terminal methodDecl
non terminal optFormArgsList
non terminal formArgsList
non terminal type
non terminal statementList
non terminal statement
non terminal expression
non terminal optActArgsList
non terminal actArgsList

/***********************/
/* OPERATOR PRECEDENCE */
/***********************/

/************************/
/* INITIAL NON TERMINAL */
/************************/
start with prog;

/********************/
/* PRODUCTION RULES */
/********************/

prog			::= mainClass classList;
mainClass		::= CLASS IDENTIFIER LB PUBLIC STATIC VOID MAIN LP STRING LC RC IDENTIFIER RP LB statement RB RB;
classList		::= classList classDecl | ;
classDecl		::= CLASS IDENTIFIER optExtends LB varList methodList RB;
optExtends		::= EXTENDS IDENTIFIER | ;
varList			::= varList varDecl | ;
varDecl			::= type IDENTIFIER SEMICOLON;
methodList		::= methodList methlodDecl | ;
methodDecl		::= PUBLIC type IDENTIFIER LP optFormArgsList RP LB varList statementList RETURN expression SEMICOLON RB;
optFormArgsList	::= formArgsList | ;
formArgsList	::= type IDENTIFIER | formArgsList COMMA type IDENTIFIER;
type			::= INT LC RC
				  | BOOLEAN
				  | INT
				  | IDENTIFIER
statementList	::= statementList statement | ;
statement		::= LB statementList RB
				  | IF LP expression RP statement ELSE statement
				  | WHILE LP expression RP statement
				  | SYSO LP expression RP SEMICOLON
				  | IDENTIFIER EQUAL expression SEMICOLON
				  | IDENTIFIER LC expression RC EQUALS expression SEMICOLON;
expression		::= expression AND expression
				  | expression LT expression
				  | expression PLUS expression
				  | expression MINUS expression
				  | expression MNULT expression
				  | expression LC expression
				  | expression DOT LENGTH
				  | expression DOT IDENTIFIER LP optActArgsList RP
				  | NUMBER
				  | TRUE
				  | FALSE
				  | IDENTIFIER
				  | THIS
				  | NEW INT LC expression RC
				  | NEW IDENTIFIER LP RP
				  | NEG expression
				  | LP expression RP
optActArgsList	::= actArgsList | ;
actArgsList		::= expression | actArgsList COMMA expression;